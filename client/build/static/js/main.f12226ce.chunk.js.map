{"version":3,"sources":["toCSV.js","App.js","serviceWorker.js","index.js"],"names":["Parser","require","toCSV","json","opts","fields","parse","err","console","error","host","a","fetch","then","res","r","sort","b","Date","data","map","_","omit","moment","format","Table","React","useState","table","setTable","useEffect","fetchTable","link","csvContent","keys","e","values","join","encodeURI","getLink","style","maxWidth","margin","textAlign","maxHeight","overflow","replace","csvDelimiter","tableClassName","href","download","NotFound","display","width","height","justifyContent","alignItems","fontSize","QrCode","caixaID","match","params","flexDirection","marginBottom","bgColor","fgColor","level","value","Boolean","window","location","hostname","ReactDOM","render","path","component","exact","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wVAAQA,G,MAAWC,EAAQ,IAAnBD,QAEO,SAASE,EAAMC,GAC5B,IACMC,EAAO,CAAEC,OADA,CAAC,QAAS,OAAQ,SAGjC,IAGE,OAFe,IAAIL,EAAOI,GACPE,MAAMH,GAEzB,MAAOI,GACPC,QAAQC,MAAMF,I,mjBCDlB,IAEMG,EACF,qC,2CAGJ,sBAAAC,EAAA,8EACSC,MAAM,GAAD,OAAIF,EAAJ,gBACTG,KAAK,SAAAC,GAAG,OAAIA,EAAIX,SAChBU,KAAK,SAAAE,GAAC,OACLA,EACGC,KAAK,SAACL,EAAGM,GACR,OAAI,IAAIC,KAAKD,EAAEE,MAAQ,IAAID,KAAKP,EAAEQ,MAAc,GACxC,IAETC,IAAI,SAAAT,GAAC,YACDU,IAAEC,KAAKX,EAAG,QADT,CAEJQ,KAAMI,IAAOZ,EAAEQ,MAAMK,OAAO,iCAXtC,0C,sBAgBA,SAASC,IAAS,IAAD,EACWC,IAAMC,SAAS,MAD1B,mBACRC,EADQ,KACDC,EADC,KAOf,GAJAH,IAAMI,UAAU,Y,2CACdC,GAAalB,KAAKgB,IACjB,KAEED,EAAO,OAAO,iDAEnB,IAAMI,EAwBR,SAAiBJ,GACf,IAAIK,EACF,+BACA,CAACZ,IAAEa,KAAKN,EAAM,KAAd,mBAAsBA,IAAOR,IAAI,SAAAe,GAAC,OAAId,IAAEe,OAAOD,GAAGE,KAAK,OAAMA,KAAK,MAIpE,OAFiBC,UAAUL,GA7BdM,CAAQX,GAErB,OACE,yBACEY,MAAO,CACLC,SAAU,KACVC,OAAQ,YACRC,UAAW,SACXC,UAAW,OACXC,SAAU,SAGZ,kBAAC,iBAAD,CACE1B,KAAMjB,EAAM0B,GAAOkB,QAAQ,KAAM,IACjCC,aAAa,IACbC,eAAe,oCAEjB,uBAAGC,KAAMjB,EAAMkB,SAAS,cAAxB,WAiBN,SAASC,IACP,OACE,yBACEX,MAAO,CACLY,QAAS,OACTC,MAAO,QACPC,OAAQ,QACRC,eAAgB,SAChBC,WAAY,WAGd,wBAAIhB,MAAO,CAAEE,OAAQ,EAAGe,SAAU,UAAlC,QAiBN,SAASC,EAAT,GAA4B,IAEdC,EAFa,EAATC,MAEdC,OAAUF,QAGZ,OACE,yBACEnB,MAAO,CACLY,QAAS,OACTC,MAAO,QACPC,OAAQ,QACRC,eAAgB,SAChBC,WAAY,SACZM,cAAe,WAGjB,wBAAItB,MAAO,CAAEuB,aAAc,KAA3B,gBAA2CJ,IAC3C,kBAAC,SAAD,CACEK,QAAQ,UACRC,QAAQ,UACRC,MAAM,IACN1B,MAAO,CAAEa,MAAO,KAChBc,MAAK,UAAKzD,EAAL,sCAAuCiD,MCjHhCS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASX,MACvB,2DCZNY,IAASC,OAAO,kBFqFD,WACb,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,yBAAyBC,UAAWjB,EAAQkB,OAAK,IAC7D,kBAAC,IAAD,CAAOF,KAAK,UAAUC,UAAWlD,IACjC,kBAAC,IAAD,CAAOkD,UAAWxB,OE3FV,MAAS0B,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpE,KAAK,SAAAqE,GACjCA,EAAaC,iB","file":"static/js/main.f12226ce.chunk.js","sourcesContent":["const { Parser } = require(\"json2csv\")\n\nexport default function toCSV(json) {\n  const fields = [\"caixa\", \"nome\", \"data\"]\n  const opts = { fields }\n\n  try {\n    const parser = new Parser(opts)\n    const csv = parser.parse(json)\n    return csv\n  } catch (err) {\n    console.error(err)\n  }\n}\n","import { QRCode } from \"react-qr-svg\"\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\nimport moment from \"moment\"\nimport React from \"react\"\nimport { CsvToHtmlTable } from \"react-csv-to-table\"\nimport _ from \"lodash\"\n\nimport \"./App.css\"\nimport toCSV from \"./toCSV\"\n\nconst isProduction = process.env.NODE_ENV === \"production\"\n\nconst host = isProduction\n  ? \"https://vitormachado.herokuapp.com\"\n  : \"http://localhost:3015\"\n\nasync function fetchTable() {\n  return fetch(`${host}/fetchTable`)\n    .then(res => res.json())\n    .then(r =>\n      r\n        .sort((a, b) => {\n          if (new Date(b.data) > new Date(a.data)) return 1\n          return -1\n        })\n        .map(a => ({\n          ..._.omit(a, \"data\"),\n          data: moment(a.data).format(\"DD/MM/YY [Ã s] HH:mm\")\n        }))\n    )\n}\n\nfunction Table() {\n  const [table, setTable] = React.useState(null)\n\n  React.useEffect(() => {\n    fetchTable().then(setTable)\n  }, [])\n\n  if (!table) return <h3>Carregando tabela</h3>\n\n  const link = getLink(table)\n\n  return (\n    <div\n      style={{\n        maxWidth: 1024,\n        margin: \"50px auto\",\n        textAlign: \"center\",\n        maxHeight: \"90vh\",\n        overflow: \"auto\"\n      }}\n    >\n      <CsvToHtmlTable\n        data={toCSV(table).replace(/\"/g, \"\")}\n        csvDelimiter=\",\"\n        tableClassName=\"table table-striped table-hover\"\n      />\n      <a href={link} download=\"tabela.csv\">\n        Baixar\n      </a>\n    </div>\n  )\n}\n\nfunction getLink(table) {\n  let csvContent =\n    \"data:text/csv;charset=utf-8,\" +\n    [_.keys(table[0]), ...table].map(e => _.values(e).join(\",\")).join(\"\\n\")\n\n  var encodedUri = encodeURI(csvContent)\n\n  return encodedUri\n}\n\nfunction NotFound() {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        width: \"100vw\",\n        height: \"100vh\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      }}\n    >\n      <h1 style={{ margin: 0, fontSize: \"15rem\" }}>404</h1>\n    </div>\n  )\n}\n\nexport default function App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/qrcode/caixa/:caixaID\" component={QrCode} exact></Route>\n        <Route path=\"/tabela\" component={Table}></Route>\n        <Route component={NotFound}></Route>\n      </Switch>\n    </Router>\n  )\n}\n\nfunction QrCode({ match }) {\n  const {\n    params: { caixaID }\n  } = match\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        width: \"100vw\",\n        height: \"100vh\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        flexDirection: \"column\"\n      }}\n    >\n      <h1 style={{ marginBottom: 25 }}>{`Caixa ${caixaID}`}</h1>\n      <QRCode\n        bgColor=\"#FFFFFF\"\n        fgColor=\"#000000\"\n        level=\"Q\"\n        style={{ width: 256 }}\n        value={`${host}/registro?nome=Vitor&caixa=${caixaID}`}\n      />\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}